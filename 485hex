#include <avr/pgmspace.h>
const PROGMEM char forward[] =  {0x05, 0x10, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01, 0x55, 0x50};
const PROGMEM char backward[] = {0x05, 0x10, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x02, 0x15, 0x51};
const PROGMEM char freq10[] =   {0x05, 0x10, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0xE8, 0x95, 0xFF};
const PROGMEM char freq15[] =   {0x05, 0x10, 0x00, 0x01, 0x00, 0x01, 0x02, 0x05, 0xDC, 0x97, 0x88};
const PROGMEM char stay[] =     {0x05, 0x10, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x94, 0x90};

#include <SoftwareSerial.h>
SoftwareSerial Serial485(10, 11);

int mEn = 9;
int sEn = 12;
int led = 13;

int k;
char b;
char output;
String input;

void setup() {
  pinMode(mEn, OUTPUT);
  pinMode(sEn, OUTPUT);
  pinMode(led, OUTPUT);
  digitalWrite(mEn, LOW);
  digitalWrite(sEn, LOW);
  digitalWrite(led, LOW);
  Serial.begin(9600);
  Serial485.begin(9600);
}

void loop() {

  while (Serial.available()) {
    b = Serial.read();
    input += b;
    switch (input.charAt(0)) {
      case 0x05:
        if (input.length() == 2) { 
          switch (input.charAt(1)) {
            case 0x00:
              sendSlave(stay, 11);
              break;
            case 0x01:
              sendSlave(forward, 11);
              break;
            case 0x02:
              sendSlave(backward, 11);
              break;
            default:
              input = "";
          }
        }
        break;        
      default:
        input = "";
    }   
  }
  
  while (Serial485.available()) {
    b = Serial485.read();
    input += b;
    switch (input.charAt(0)) {
      case 0x05:
        if (input.length() == 2) { 
          switch (input.charAt(1)) {
            case 0x00:
              sendMaster(freq10, 11);
              break;
            case 0x01:
              sendMaster(freq15, 11);
              break;
            default:
              input = "";
          }
        }
        break;        
      default:
        input = "";
    }
  }
}

void sendSlave (const char* h, int n){
  input = "";
  digitalWrite(sEn, HIGH);
  digitalWrite(led, HIGH);
  for (k = 0; k < n; k++) {
    output = pgm_read_word_near(h + k);
    Serial485.print(output);
  }       
  //delayMicroseconds (660);
  while (!(UCSR0A & (1 << UDRE0)))  // Wait for empty transmit buffer
  UCSR0A |= 1 << TXC0;              // mark transmission not complete
  while (!(UCSR0A & (1 << TXC0)));  // Wait for the transmission to complete
  digitalWrite(sEn, LOW);
  digitalWrite(led, LOW);
}

void sendMaster (const char* h, int n){
  input = "";
  digitalWrite(mEn, HIGH);
  digitalWrite(led, HIGH);
  for (k = 0; k < n; k++) {
    output = pgm_read_word_near(h + k);
    Serial.print(output);
  }        
  //delayMicroseconds (660);
  while (!(UCSR0A & (1 << UDRE0)))  // Wait for empty transmit buffer
  UCSR0A |= 1 << TXC0;              // mark transmission not complete
  while (!(UCSR0A & (1 << TXC0)));  // Wait for the transmission to complete
  digitalWrite(mEn, LOW);
  digitalWrite(led, LOW);  
}
