#include <avr/pgmspace.h>
const PROGMEM char forward[] =  {0x05, 0x10, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01, 0x55, 0x50};
const PROGMEM char backward[] = {0x05, 0x10, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x02, 0x15, 0x51};
const PROGMEM char freq10[] =   {0x05, 0x10, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0xE8, 0x95, 0xFF};
const PROGMEM char freq15[] =   {0x05, 0x10, 0x00, 0x01, 0x00, 0x01, 0x02, 0x05, 0xDC, 0x97, 0x88};
const PROGMEM char stay[] =     {0x05, 0x10, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x94, 0x90};

const PROGMEM char test1[8] =   {0x84, 0x30, 0xB1, 0x30, 0xB2, 0x30, 0x39, 0x05};
const PROGMEM char test2[14] =  {0x84, 0x30, 0xB1, 0x82, 0x30, 0x33, 0x30, 0x35, 0x30, 0x30, 0x30, 0xB1, 0x03, 0xA3};

#include <SoftwareSerial.h>
SoftwareSerial SerialMaster(8, 9);
SoftwareSerial SerialSlave(10, 11);

int mEn = 7;
int sEn = 12;
int led = 13;

int k;
char output;
char input[14];

void setup() {
  pinMode(mEn, OUTPUT);
  pinMode(sEn, OUTPUT);
  pinMode(led, OUTPUT);
  digitalWrite(mEn, LOW);
  digitalWrite(sEn, LOW);
  digitalWrite(led, LOW);
  Serial.begin(9600);
  SerialMaster.begin(9600);
  SerialSlave.begin(9600);
  Serial.setTimeout(0);
}

void loop() {
  while (SerialSlave.available()) {
    SerialSlave.readBytes(input, 14);
    if (input[0] == test1[0] && input[1] == test1[1] && input[2] == test1[2] && input[3] == test1[3] && input[4] == test1[4] && input[5] == test1[5] && input[6] == test1[6] && input[7] == test1[7]) {
      Serial.print("if");
//      sendMaster(freq15, 11);
      Serial.write(input, 14);
      Serial.println("");
    }
    else {
      Serial.print("else");
//      sendMaster(freq10, 11);
      Serial.write(input, 14);
      Serial.println("");
    }
  }
}

void sendMaster (const char* h, int n){
  digitalWrite(mEn, HIGH);
  digitalWrite(led, HIGH);
//  for (k = 0; k < n; k++) {
//    output = pgm_read_word_near(h + k);
//    Serial.print(output);
//  }
  //delayMicroseconds (660);
  while (!(UCSR0A & (1 << UDRE0))) // Wait for empty transmit buffer
  UCSR0A |= 1 << TXC0; // mark transmission not complete
  while (!(UCSR0A & (1 << TXC0))); // Wait for the transmission to complete
  digitalWrite(mEn, LOW);
  digitalWrite(led, LOW);
}
